# 7. В подключенном MySQL репозитории создать базу данных “Друзья человека”.

CREATE SCHEMA `human_friends` ;
USE human_friends;

# 8.Создать таблицы с иерархией из диаграммы в БД

CREATE TABLE animal_classes (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    class_name VARCHAR(20)
);

INSERT INTO animal_classes (class_name)
VALUES ('Домашние животные'),
('Вьючные животные');

CREATE TABLE pack_animals (
    id INT AUTO_INCREMENT PRIMARY KEY,
    type_animal VARCHAR (20),
    class_id INT,
    FOREIGN KEY (class_id) REFERENCES animal_classes (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE pets (
    id INT AUTO_INCREMENT PRIMARY KEY,
    type_animal VARCHAR (20),
    class_id INT,
    FOREIGN KEY (class_id) REFERENCES animal_classes (id) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO pack_animals (type_animal, class_id)
VALUES
('Лошади', 1),
('Верблюды', 1),  
('Ослы', 1); 

INSERT INTO pets (type_animal, class_id)
VALUES
('Собаки', 2),
('Кошки', 2),  
('Хомяки', 2); 

CREATE TABLE dogs (       
    id INT AUTO_INCREMENT PRIMARY KEY, 
    animal_name VARCHAR(20), 
    birthday DATE,
    commands VARCHAR(50),
    pet_id int,
    FOREIGN KEY (pet_id) REFERENCES pets (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE cats (       
    id INT AUTO_INCREMENT PRIMARY KEY, 
    animal_name VARCHAR(20), 
    birthday DATE,
    commands VARCHAR(50),
    pet_id int,
    FOREIGN KEY (pet_id) REFERENCES pets (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE humsters (       
    id INT AUTO_INCREMENT PRIMARY KEY, 
    animal_name VARCHAR(20), 
    birthday DATE,
    commands VARCHAR(50),
    pet_id int,
    FOREIGN KEY (pet_id) REFERENCES pets (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE horses (       
    id INT AUTO_INCREMENT PRIMARY KEY, 
    animal_name VARCHAR(20), 
    birthday DATE,
    commands VARCHAR(50),
    pack_animal_id int,
    FOREIGN KEY (pack_animal_id) REFERENCES pack_animals (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE camels (       
    id INT AUTO_INCREMENT PRIMARY KEY, 
    animal_name VARCHAR(20), 
    birthday DATE,
    commands VARCHAR(50),
    pack_animal_id int,
    FOREIGN KEY (pack_animal_id) REFERENCES pack_animals (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE donkeys (       
    id INT AUTO_INCREMENT PRIMARY KEY, 
    animal_name VARCHAR(20), 
    birthday DATE,
    commands VARCHAR(50),
    pack_animal_id int,
    FOREIGN KEY (pack_animal_id) REFERENCES pack_animals (id) ON DELETE CASCADE ON UPDATE CASCADE
);

# 9. Заполнить низкоуровневые таблицы именами(животных), командами которые они выполняют и датами рождения.

INSERT INTO dogs (animal_name, birthday, commands, pet_id)
VALUES ('Бобик', '2018-01-01', 'Сидеть', 1),
('Буня', '2019-01-01', 'Служить', 1),  
('Вольтер', '2022-01-01', 'Умри', 1); 

INSERT INTO cats (animal_name, birthday, commands, pet_id)
VALUES ('Аля', '2018-01-01', 'Место', 2),
('Кристи', '2016-01-01', 'Голос', 2),  
('Мисси', '2023-01-01', 'Голос', 2); 

INSERT INTO humsters (animal_name, birthday, commands, pet_id)
VALUES ('Моня', '2023-01-01', 'Моня', 3),
('Мефодий', '2022-01-01', 'Мефодий', 3),  
('Вики', '2023-01-01', 'Вики', 3); 

INSERT INTO horses (animal_name, birthday, commands, pack_animal_id)
VALUES ('Гром', '2020-01-01', 'Хоп, стой, Но', 1),
('Гала', '2021-01-01', 'Хоп, Рысь, Тише', 1),  
('Крюк', '2018-01-01', 'Хоп, Шагом', 1); 

INSERT INTO camels (animal_name, birthday, commands, pack_animal_id)
VALUES ('Пустяк', '2019-01-01', 'Цок-цок, Гит', 2),
('Большой', '2016-01-01', 'Гит, Хап-хап', 2),  
('Пустынка', '2017-01-01', 'Каш, Дур', 2);

INSERT INTO donkeys (animal_name, birthday, commands, pack_animal_id)
VALUES ('Ося', '2018-01-01', 'Но, Пошел', 3),
('Рой', '2017-01-01', 'Тише, Стой', 3),  
('Каратель', '2017-01-01', 'Шагом, Брр', 3); 

# 10. Удалив из таблицы верблюдов, т.к. верблюдов решили перевезти в другой питомник на зимовку, объединить таблицы лошади и ослы в одну таблицу.
SET SQL_SAFE_UPDATES = 0;
DELETE FROM camels;

SELECT animal_name, birthday, commands FROM horses
UNION
SELECT animal_name, birthday, commands FROM donkeys;

# 11. Создать новую таблицу “молодые животные” в которую попадут все животные старше 1 года, но младше 3 лет и в отдельном столбце с точностью до месяца подсчитать возраст животных в новой таблице.
CREATE TEMPORARY TABLE temp_animals AS
SELECT *, 'Лошади' AS animal_type FROM horses
UNION
SELECT *, 'Ослы' AS animal_type FROM donkeys
UNION
SELECT *, 'Собаки' AS animal_type FROM dogs
UNION
SELECT *, 'Кошки' AS animal_type FROM cats
UNION
SELECT *, 'Хомяки' AS animal_type FROM humsters;

CREATE TABLE young_animals AS
SELECT animal_name, birthday, commands, animal_type,
TIMESTAMPDIFF(MONTH, birthday, CURDATE()) AS age_in_month
FROM temp_animals WHERE birthday BETWEEN ADDDATE(curdate(), INTERVAL -3 YEAR) AND ADDDATE(CURDATE(), INTERVAL -1 YEAR);
 
# 12. Объединить все таблицы в одну, при этом сохраняя поля, указывающие на прошлую принадлежность к старым таблицам.
SELECT h.animal_name, h.birthday, h.commands, p.type_animal, y.age_in_month
FROM horses h
LEFT JOIN young_animals y ON y.animal_name = h.animal_name
LEFT JOIN pack_animals p ON p.id = h.pack_animal_id
UNION 
SELECT d.animal_name, d.birthday, d.commands, p.type_animal, y.age_in_month
FROM donkeys d 
LEFT JOIN young_animals y ON y.animal_name = d.animal_name
LEFT JOIN pack_animals p ON p.id = d.pack_animal_id
UNION
SELECT cats.animal_name, cats.birthday, cats.commands, pets.type_animal, y.age_in_month
FROM cats
LEFT JOIN young_animals y ON y.animal_name = cats.animal_name
LEFT JOIN pets ON pets.id = cats.pet_id
UNION
SELECT dogs.animal_name, dogs.birthday, dogs.commands, pets.type_animal, y.age_in_month 
FROM dogs
LEFT JOIN young_animals y ON y.animal_name = dogs.animal_name
LEFT JOIN pets ON pets.id = dogs.pet_id
UNION
SELECT hu.animal_name, hu.birthday, hu.commands, pets.type_animal, y.age_in_month 
FROM humsters hu
LEFT JOIN young_animals y ON y.animal_name = hu.animal_name
LEFT JOIN pets ON pets.id = hu.pet_id;
